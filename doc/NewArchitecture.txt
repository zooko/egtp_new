Introduction to the EGTP version 2 Architecture:

document version 0.0.1

I. Background Material

I will not assume that you have read the following, but I do recommend them.

A. General Crypto Protocol Design

 * Ross J. Anderson. Why cryptosystems fail. Communications of the ACM, 
37(11):32--40, November 1994. 
http://citeseer.nj.nec.com/anderson94why.html

 * Abadi, M. and Needham, R. 1996. Prudent engineering practice for 
cryptographic protocols. IEEE Trans. Softw. Eng. 22, 1 (Jan.), 6-15. 
http://citeseer.nj.nec.com/abadi95prudent.html

 * Ross J. Anderson, Roger M. Needham, "Programming Satan's Computer", in 
Computer Science Today, Springer LNCS v 1000 pp 426--441 
http://citeseer.nj.nec.com/22376.html

B. Replay Attacks/Active Attacks

 * P. Syverson. A taxonomy of replay attacks. In Computer Security Foundations 
Workshop VII. IEEE Computer Society Press, 1994.
http://citeseer.nj.nec.com/syverson94taxonomy.html 

[Zooko: write argument that EGTPv2 addresses all classes from this taxonomy.  
See if Paul Syverson will review it for you. --Zooko]

 * "Strategies Against Replay Attacks" 1997 Tuomas Aura
http://citeseer.nj.nec.com/aura97strategies.html

 * Li Gong. Variations on the Themes of Message Freshness and Replay or, the 
Difficulty of Devising Formal Methods to Analyze Cryptographic Protocols. In 
Proceedings of the Computer Security Foundations Workshop VI, pages 131--136. 
IEEE Computer Society Press, Los Alamitos, California, 1993.
http://citeseer.nj.nec.com/gong93variations.html

C. Fail-Stop/Constructive Approaches

 * Li Gong and Paul Syverson. Fail-stop protocols: An approach to designing 
secure protocols. In R. K. Iyer, M. Morganti, Fuchs W. K, and V. Gligor, 
editors, Dependable Computing for Critical Applications 5, pages 79--100. IEEE 
Computer Society, 1998.
http://citeseer.nj.nec.com/gong95failstop.html

[Zooko: write argument that EGTPv2 implements full fail-stop/fail-safe layer and 
any application-level user of EGTPv2 that uses EGTPv2 solely through EGTPv2's 
API automatically has a fail-stop/fail-safe protocol.  See if Li Gong and Paul 
Syverson will review it for you. :-)  --Zooko]

D. EGTPv1

 * Zooko and Art. Introduction to the EGTP version 1 Architecture
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/egtp/egtp_new/doc/Architecture.txt?rev=HEAD&content-type=text/vnd.viewcvs-markup

II. Desiderata

A.  Automatic Fail Stop

This is the semi-novel bit, and the most important distinction from other secure comms layers.

B.  Unify Designation and Public Key

The API requires that you pass the public key Id in order to specify which recipient you mean.  No doing as so many do -- allowing public key and "recipient Id" to get separated, and then trying to tie them back together later...

C.  Forward Secrecy

D.  Key-Privacy

E.  Protocol-Privacy

The protocol is indistinguishable from a random bitstream to someone who doesn't know the decryption key.  (This requires public key privacy.)  Also, "Silent Bob Mode" a la Freenet -- you can't find out if a given computer speaks this protocol unless you provide some secret or semi-secret challenge (e.g. use the right public key for that computer...).

F.  Deniability

E.g. Ian Goldberg and Nikita Borisov's "Off The Record Messaging"

G.  Efficiency

Most importantly: minimal round-trips.  Secondly, minimal message size.  Thirdly, minimal computation.

H.  Simplicity

It's actually going to be rather subtle, but of course we always like simplicity when we can have it.  In particular, there will be no "protocol negotiation" where I say "I like AES, DES, and Anubis" and he says "Well *I* like 3DES-EDE, DES, and Serpent...".

III.  Summary

(These notes are transcribed from scribbles on paper and I'm in a hurry.  --Zooko 2002-12-14)

[this version of protocol no ordering guarantee]

 * FRESHNESSPROOF, NONCE (unspecified but recommended and beware restart re-use)
 * CHALLENGE
 * sender remembers MSG until ACK, unless willing to never learn resolution
 * receiver remembers ACK until ACKACK, unless willing to break RELATIONSHIP ("DIALOG"? "SERVICEAGREEMENT"? "CHANNEL"?)
 * RELATIONSHIPID
 * rememberer resends until satisfied (with backoff)
 * msg uniqueness guarantee: NONCE is in context of FRESHNESSPROOF, FRESHNESSPROOF is in context of MSGSHAREDSECRET, MSS binds in SENDERID and RECIPID which bind in PUBLICKEY and are universally unique
! Oooh, waitasec -- maybe MSS can bind in all of the above..  :-)




