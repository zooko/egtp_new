How to install:

We now use Python's Distutils for this package.

== Mac OS X ==

There are two versions of python 2.2 on OS X: 
	1) the "unix" version.  This is shipped with OS X 10.2.  It lives at
'/usr/bin/python'.  

There is an bug in the Makefile that is shipped with this version of python
that you will need to fix to build python extentions.  In the file
'/usr/lib/python2.2/config/Makefile', line 934, it says:

LDFLAGS=        -arch i386 -arch ppc

Change it to:

LDFLAGS=        -arch ppc

	2) the "framework" version.  In order for python extentions like
wxPython to work (which we use for gui stuff in Mnet) you need the framework
version.  The diffrence has something silly to do with how OS X handles
dynmaic libs. You can get a package from the wxPython sf.net download page [1].  
This will install a python binary at '/usr/local/bin/python', so if you go
this route either specify '/usr/local/bin/python setup.py' every time you
need to call setup.py or make sure '/usr/local/bin' is before '/usr/bin' in
your $PATH.

1 - http://sourceforge.net/project/showfiles.php?group_id=10718


== pybsddb ==

pybsddb3 is required for building egtp.  If you use the version of python
that came with your Linux distrbution you can get packages by:

Debain - 'apt-get install python-bsddb3'

Redhat - You can get an RPM at
http://rpmfind.net/linux/RPM/sourceforge/pybsddb/bsddb3-3.3.0-1.i386.html

If you've built your python from source (like say the python 2.3 alpha), or
your on Mac OS X you will need to build pybsddb3 from source as well.  You
can get the source from the url below:

http://pybsddb.sourceforge.net/

== other requirements ==

To download prerequisites (crypto++, pyutil, libbase32):

  python setup.py download
  
== installing == 

To install type:

  python setup.py install

To test before you install:

  python setup.py test

== Win32 Notes ==

To compile using mingw32 first:
  
  python setup.py build --compiler=mingw32

or create a file named setup.cfg in the same dir with the following two lines:
  [build]
  compiler=mingw32

This will allow you to just run test without building by hand first.

  
== Unit tests ==

Running
	
	python setup.py test 
	  
Will run all the unit tests found in egtp/test/.  This is useful to see if
you broke anything while changing things in the source code.

== Examples ==

Soon we hope to have some better examples of how to use this in examples/

== How to learn the API ==

0.  Read the file named "Tutorial.txt" in the egtp/ directory.

1.  The example: Look at EGTPunittest.py, in the function named
`_help_test_EGTP_send_and_receive()' to see basic operation of creating
nodes and sending and receiving messages.

2.  The interface that provides messaging:  Look at the interface of class
Node in Node.py.

3.  The interfaces that provide lookup and discovery:  Look at the
interfaces for lookup managers, lookup handlers, discovery managers, and
discovery handlers in interfaces.py.

3.a. You can see implementations of the manager classes (local,
    non-distributed, for-testing-only) in EGTPtest.py.

3.b. You can see how EGTP uses the manager classes in MojoTransaction.py
    (see how it uses the `self._lookupman' member) and RelayListener.py (see
    how it uses the `self._discoveryman' member).

3.c. You can see how EGTP defines and uses handler classes in
    MojoTransaction.py (class LookupHand) and in RelayListener.py (class
    ShoppingResultsHand).


